system("R CMD INSTALL ~/R_packages/dialectR")
system("R CMD build ~/R_packages/dialectR")
system("R CMD INSTALL ~/R_packages/dialectR")
Rcpp::sourceCpp('R_packages/dialectR/src/distance_matrix.cpp')
system("R CMD build R_packages/dialectR)
system(R CMD build R_packages/dialectR)
system("R CMD build R_packages/dialectR")
system("R CMD INSTALL R_packages/dialectR")
system("R CMD build R_packages/dialectR")
system("R CMD INSTALL R_packages/dialectR")
system("R CMD build R_packages/dialectR")
system("R CMD INSTALL R_packages/dialectR")
system("R CMD build R_packages/dialectR")
system("R CMD INSTALL R_packages/dialectR")
system("R CMD build R_packages/dialectR")
system("R CMD INSTALL R_packages/dialectR")
library(dialectR)
load(Dutch)
Dutch
library(dialectR)
Dutch
load('C:\Users\USER\Documents\R_packages\dialectR\data\Dutch.rda')
setwd("~/R_packages/dialectR/data")
load('Dutch.rda')
View(Dutch)
View(a)
Dutch <- a
save(Dutch, 'Dutch.rda')
save(Dutch, file = 'Dutch.rda')
load('Dutch.rda')
View(Dutch)
knitr::opts_chunk$set(echo = TRUE)
load(Dutch.rda)
setwd("~/R_packages/dialectR/data")
load(Dutch.rda)
load(C:/Users/USER/Documents\R_packages\dialectR\data\Dutch.rda)
load('C:\Users\USER\Documents\R_packages\dialectR\data\Dutch.rda')
load(C:\Users\USER\Documents\R_packages\dialectR\data\Dutch.rda)
load("C:\Users\USER\Documents\R_packages\dialectR\data\Dutch.rda")
load("C:\\Users\USER\Documents\R_packages\dialectR\data\Dutch.rda")
load("C:\\Users\\USER\\Documents\\R_packages\\dialectR\\data\\Dutch.rda")
load("C:\\Users\\USER\\Documents\\R_packages\\dialectR\\data\\Dutch.rda")
leven("hit", "hot", alignment_normalization = TRUE)
library(reticulate)
a <- import("scipy.io.wavfile")
# Global reference to peakutils package - initialized in .onLoad
numpy <- NULL
sklearn <- NULL
scipy <- NULL
python_speech_features <- NULL
speechpy <- NULL
dtw <- NULL
# Called upon loading the package
.onLoad <- function(libname, pkgname) {
# Use superassignment to update global reference to peakutils
numpy <<- reticulate::import("numpy", delay_load = TRUE)
sklearn <<- reticulate::import("sklearn", delay_load = TRUE)
scipy <<- reticulate::import("scipy", delay_load = TRUE)
python_speech_features <<- reticulate::import("python_speech_features", delay_load = TRUE)
speechpy <<- reticulate::import("speechpy", delay_load = TRUE)
dtw <<- reticulate::import("dtw", delay_load = TRUE)
}
acoustic_distance <- function(file1){
scipy$io$wavfile$read(file1)
}
acoustic_distance("C:\Users\USER\Downloads\ipa_vowels\test_set\a.wav")
acoustic_distance("C:/Users/USER/Downloads/ipa_vowels/test_set/a.wav")
# Called upon loading the package
.onLoad <- function(libname, pkgname) {
# Use superassignment to update global reference to peakutils
numpy <<- reticulate::import("numpy", delay_load = TRUE)
sklearn <<- reticulate::import("sklearn", delay_load = TRUE)
scipy <<- reticulate::import("scipy", delay_load = TRUE)
python_speech_features <<- reticulate::import("python_speech_features", delay_load = TRUE)
speechpy <<- reticulate::import("speechpy", delay_load = TRUE)
dtw <<- reticulate::import("dtw", delay_load = TRUE)
}
scipy <- import("scipy")
acoustic_distance <- function(file1){
scipy$io$wavfile$read(file1)
}
acoustic_distance("C:/Users/USER/Downloads/ipa_vowels/test_set/a.wav")
library(magrittr)
acoustic_distance <- function(file1, file2){
file1 <- scipy$io$wavfile$read(file1)
file2 <- scipy$io$wavfile$read(file2)
file1[[1]]
}
acoustic_distance("C:/Users/USER/Downloads/ipa_vowels/test_set/a.wav")
acoustic_distance("C:/Users/USER/Downloads/ipa_vowels/test_set/a.wav", "C:/Users/USER/Downloads/ipa_vowels/test_set/a.wav")
python_speech_features$mfcc
python_speech_features$mfcc()
python_speech_features <- import("python_speech_features")
acoustic_distance <- function(file1, file2){
file1 <- scipy$io$wavfile$read(file1)
file2 <- scipy$io$wavfile$read(file2)
file1 %>%
python_speech_features$mfcc(.[[2]], .[[1]])
}
acoustic_distance("C:/Users/USER/Downloads/ipa_vowels/test_set/a.wav", "C:/Users/USER/Downloads/ipa_vowels/test_set/a.wav")
numpy <- import("numpy")
acoustic_distance <- function(file1, file2){
file1 <- scipy$io$wavfile$read(file1)
file2 <- scipy$io$wavfile$read(file2)
file1 %>%
python_speech_features$mfcc(.[[2]],
.[[1]],
winlen = 0.025,
winstep = 0.01,
preemph = 0.97,
numcep = 12,
appendEnergy = TRUE,
winfunc = numpy$hamming,
nfft=1024)
}
acoustic_distance("C:/Users/USER/Downloads/ipa_vowels/test_set/a.wav", "C:/Users/USER/Downloads/ipa_vowels/test_set/a.wav")
acoustic_distance <- function(file1, file2){
file1 <- scipy$io$wavfile$read(file1)
file2 <- scipy$io$wavfile$read(file2)
python_speech_features$mfcc(file1[[2]],
file1[[1]],
winlen = 0.025,
winstep = 0.01,
preemph = 0.97,
numcep = 12,
appendEnergy = TRUE,
winfunc = numpy$hamming,
nfft=1024)
}
acoustic_distance("C:/Users/USER/Downloads/ipa_vowels/test_set/a.wav", "C:/Users/USER/Downloads/ipa_vowels/test_set/a.wav")
acoustic_distance <- function(file1, file2){
file1 <- scipy$io$wavfile$read(file1)
file2 <- scipy$io$wavfile$read(file2)
python_speech_features$mfcc(file1[[2]],
file1[[1]],
winlen = 0.025,
winstep = 0.01,
preemph = 0.97,
numcep = as.integer(12),
appendEnergy = TRUE,
winfunc = numpy$hamming,
nfft=as.interger(1024))
}
acoustic_distance("C:/Users/USER/Downloads/ipa_vowels/test_set/a.wav", "C:/Users/USER/Downloads/ipa_vowels/test_set/a.wav")
acoustic_distance <- function(file1, file2){
file1 <- scipy$io$wavfile$read(file1)
file2 <- scipy$io$wavfile$read(file2)
python_speech_features$mfcc(file1[[2]],
file1[[1]],
winlen = 0.025,
winstep = 0.01,
preemph = 0.97,
numcep = as.integer(12),
appendEnergy = TRUE,
winfunc = numpy$hamming,
nfft=as.integer(1024))
}
acoustic_distance("C:/Users/USER/Downloads/ipa_vowels/test_set/a.wav", "C:/Users/USER/Downloads/ipa_vowels/test_set/a.wav")
acoustic_distance <- function(file1, file2){
file1 <- scipy$io$wavfile$read(file1)
file2 <- scipy$io$wavfile$read(file2)
python_speech_features$mfcc(file1[[2]],
file1[[1]],
winlen = 0.025,
winstep = 0.01,
preemph = 0.97,
numcep = as.integer(12),
appendEnergy = TRUE,
winfunc = numpy$hamming,
nfft=as.integer(1024)) %>%
python_speech_features$delta(2)
}
acoustic_distance("C:/Users/USER/Downloads/ipa_vowels/test_set/a.wav", "C:/Users/USER/Downloads/ipa_vowels/test_set/a.wav")
acoustic_distance <- function(file1, file2){
file1 <- scipy$io$wavfile$read(file1)
file2 <- scipy$io$wavfile$read(file2)
python_speech_features$mfcc(file1[[2]],
file1[[1]],
winlen = 0.025,
winstep = 0.01,
preemph = 0.97,
numcep = as.integer(12),
appendEnergy = TRUE,
winfunc = numpy$hamming,
nfft=as.integer(1024)) %>%
python_speech_features$delta(as.integer(2))
}
acoustic_distance("C:/Users/USER/Downloads/ipa_vowels/test_set/a.wav", "C:/Users/USER/Downloads/ipa_vowels/test_set/a.wav")
acoustic_distance <- function(file1, file2){
file1 <- scipy$io$wavfile$read(file1)
file2 <- scipy$io$wavfile$read(file2)
mfcc1 <- python_speech_features$mfcc(file1[[2]],
file1[[1]],
winlen = 0.025,
winstep = 0.01,
preemph = 0.97,
numcep = as.integer(12),
appendEnergy = TRUE,
winfunc = numpy$hamming,
nfft=as.integer(1024))
mfcc2 <- python_speech_features$mfcc(file2[[2]],
file2[[1]],
winlen = 0.025,
winstep = 0.01,
preemph = 0.97,
numcep = as.integer(12),
appendEnergy = TRUE,
winfunc = numpy$hamming,
nfft=as.integer(1024))
deltas1 <- python_speech_features$delta(mfcc1, as.integer(2))
double_deltas1 <- python_speech_features$delta(deltas1, as.integer(2))
deltas2 <- python_speech_features$delta(mfcc2, as.integer(2))
double_deltas2 <- python_speech_features$delta(deltas2, as.integer(2))
}
acoustic_distance("C:/Users/USER/Downloads/ipa_vowels/test_set/a.wav", "C:/Users/USER/Downloads/ipa_vowels/test_set/a.wav")
acoustic_distance <- function(file1, file2){
file1 <- scipy$io$wavfile$read(file1)
file2 <- scipy$io$wavfile$read(file2)
mfcc1 <- python_speech_features$mfcc(file1[[2]],
file1[[1]],
winlen = 0.025,
winstep = 0.01,
preemph = 0.97,
numcep = as.integer(12),
appendEnergy = TRUE,
winfunc = numpy$hamming,
nfft=as.integer(1024))
mfcc2 <- python_speech_features$mfcc(file2[[2]],
file2[[1]],
winlen = 0.025,
winstep = 0.01,
preemph = 0.97,
numcep = as.integer(12),
appendEnergy = TRUE,
winfunc = numpy$hamming,
nfft=as.integer(1024))
deltas1 <- python_speech_features$delta(mfcc1, as.integer(2))
double_deltas1 <- python_speech_features$delta(deltas1, as.integer(2))
deltas2 <- python_speech_features$delta(mfcc2, as.integer(2))
double_deltas2 <- python_speech_features$delta(deltas2, as.integer(2))
combined1 <- numpy$hstack((mfcc1, deltas1, double_deltas1))
combined2 <- numpy$hstack((mfcc2, deltas2, double_deltas2))
}
acoustic_distance <- function(file1, file2){
file1 <- scipy$io$wavfile$read(file1)
file2 <- scipy$io$wavfile$read(file2)
mfcc1 <- python_speech_features$mfcc(file1[[2]],
file1[[1]],
winlen = 0.025,
winstep = 0.01,
preemph = 0.97,
numcep = as.integer(12),
appendEnergy = TRUE,
winfunc = numpy$hamming,
nfft=as.integer(1024))
mfcc2 <- python_speech_features$mfcc(file2[[2]],
file2[[1]],
winlen = 0.025,
winstep = 0.01,
preemph = 0.97,
numcep = as.integer(12),
appendEnergy = TRUE,
winfunc = numpy$hamming,
nfft=as.integer(1024))
deltas1 <- python_speech_features$delta(mfcc1, as.integer(2))
double_deltas1 <- python_speech_features$delta(deltas1, as.integer(2))
deltas2 <- python_speech_features$delta(mfcc2, as.integer(2))
double_deltas2 <- python_speech_features$delta(deltas2, as.integer(2))
combined1 <- numpy$hstack((mfcc1, deltas1, double_deltas1))
combined2 <- numpy$hstack((mfcc2, deltas2, double_deltas2))
}
acoustic_distance <- function(file1, file2){
file1 <- scipy$io$wavfile$read(file1)
file2 <- scipy$io$wavfile$read(file2)
mfcc1 <- python_speech_features$mfcc(file1[[2]],
file1[[1]],
winlen = 0.025,
winstep = 0.01,
preemph = 0.97,
numcep = as.integer(12),
appendEnergy = TRUE,
winfunc = numpy$hamming,
nfft=as.integer(1024))
mfcc2 <- python_speech_features$mfcc(file2[[2]],
file2[[1]],
winlen = 0.025,
winstep = 0.01,
preemph = 0.97,
numcep = as.integer(12),
appendEnergy = TRUE,
winfunc = numpy$hamming,
nfft=as.integer(1024))
deltas1 <- python_speech_features$delta(mfcc1, as.integer(2))
double_deltas1 <- python_speech_features$delta(deltas1, as.integer(2))
deltas2 <- python_speech_features$delta(mfcc2, as.integer(2))
double_deltas2 <- python_speech_features$delta(deltas2, as.integer(2))
combined1 <- numpy$hstack(mfcc1, deltas1, double_deltas1)
combined2 <- numpy$hstack(mfcc2, deltas2, double_deltas2)
}
acoustic_distance("C:/Users/USER/Downloads/ipa_vowels/test_set/a.wav", "C:/Users/USER/Downloads/ipa_vowels/test_set/a.wav")
acoustic_distance <- function(file1, file2){
file1 <- scipy$io$wavfile$read(file1)
file2 <- scipy$io$wavfile$read(file2)
mfcc1 <- python_speech_features$mfcc(file1[[2]],
file1[[1]],
winlen = 0.025,
winstep = 0.01,
preemph = 0.97,
numcep = as.integer(12),
appendEnergy = TRUE,
winfunc = numpy$hamming,
nfft=as.integer(1024))
mfcc2 <- python_speech_features$mfcc(file2[[2]],
file2[[1]],
winlen = 0.025,
winstep = 0.01,
preemph = 0.97,
numcep = as.integer(12),
appendEnergy = TRUE,
winfunc = numpy$hamming,
nfft=as.integer(1024))
deltas1 <- python_speech_features$delta(mfcc1, as.integer(2))
double_deltas1 <- python_speech_features$delta(deltas1, as.integer(2))
deltas2 <- python_speech_features$delta(mfcc2, as.integer(2))
double_deltas2 <- python_speech_features$delta(deltas2, as.integer(2))
combined1 <- numpy$hstack((mfcc1, deltas1, double_deltas1))
combined2 <- numpy$hstack((mfcc2, deltas2, double_deltas2))
}
acoustic_distance <- function(file1, file2){
file1 <- scipy$io$wavfile$read(file1)
file2 <- scipy$io$wavfile$read(file2)
mfcc1 <- python_speech_features$mfcc(file1[[2]],
file1[[1]],
winlen = 0.025,
winstep = 0.01,
preemph = 0.97,
numcep = as.integer(12),
appendEnergy = TRUE,
winfunc = numpy$hamming,
nfft=as.integer(1024))
mfcc2 <- python_speech_features$mfcc(file2[[2]],
file2[[1]],
winlen = 0.025,
winstep = 0.01,
preemph = 0.97,
numcep = as.integer(12),
appendEnergy = TRUE,
winfunc = numpy$hamming,
nfft=as.integer(1024))
deltas1 <- python_speech_features$delta(mfcc1, as.integer(2))
double_deltas1 <- python_speech_features$delta(deltas1, as.integer(2))
deltas2 <- python_speech_features$delta(mfcc2, as.integer(2))
double_deltas2 <- python_speech_features$delta(deltas2, as.integer(2))
#combined1 <- numpy$hstack((mfcc1, deltas1, double_deltas1))
#combined2 <- numpy$hstack((mfcc2, deltas2, double_deltas2))
deltas1
}
acoustic_distance("C:/Users/USER/Downloads/ipa_vowels/test_set/a.wav", "C:/Users/USER/Downloads/ipa_vowels/test_set/a.wav")
a <- c(1:5)
a
b <- c(6:10)
cbind(a,b)
d <- c(11:15)
cbind(a,b,d)
acoustic_distance("C:/Users/USER/Downloads/ipa_vowels/test_set/a.wav", "C:/Users/USER/Downloads/ipa_vowels/test_set/a.wav")
acoustic_distance <- function(file1, file2){
file1 <- scipy$io$wavfile$read(file1)
file2 <- scipy$io$wavfile$read(file2)
mfcc1 <- python_speech_features$mfcc(file1[[2]],
file1[[1]],
winlen = 0.025,
winstep = 0.01,
preemph = 0.97,
numcep = as.integer(12),
appendEnergy = TRUE,
winfunc = numpy$hamming,
nfft=as.integer(1024))
mfcc2 <- python_speech_features$mfcc(file2[[2]],
file2[[1]],
winlen = 0.025,
winstep = 0.01,
preemph = 0.97,
numcep = as.integer(12),
appendEnergy = TRUE,
winfunc = numpy$hamming,
nfft=as.integer(1024))
deltas1 <- python_speech_features$delta(mfcc1, as.integer(2))
double_deltas1 <- python_speech_features$delta(deltas1, as.integer(2))
deltas2 <- python_speech_features$delta(mfcc2, as.integer(2))
double_deltas2 <- python_speech_features$delta(deltas2, as.integer(2))
combined1 <- numpy$hstack(mfcc1, deltas1)
#combined2 <- numpy$hstack((mfcc2, deltas2, double_deltas2))
}
acoustic_distance("C:/Users/USER/Downloads/ipa_vowels/test_set/a.wav", "C:/Users/USER/Downloads/ipa_vowels/test_set/a.wav")
acoustic_distance <- function(file1, file2){
file1 <- scipy$io$wavfile$read(file1)
file2 <- scipy$io$wavfile$read(file2)
mfcc1 <- python_speech_features$mfcc(file1[[2]],
file1[[1]],
winlen = 0.025,
winstep = 0.01,
preemph = 0.97,
numcep = as.integer(12),
appendEnergy = TRUE,
winfunc = numpy$hamming,
nfft=as.integer(1024))
mfcc2 <- python_speech_features$mfcc(file2[[2]],
file2[[1]],
winlen = 0.025,
winstep = 0.01,
preemph = 0.97,
numcep = as.integer(12),
appendEnergy = TRUE,
winfunc = numpy$hamming,
nfft=as.integer(1024))
deltas1 <- python_speech_features$delta(mfcc1, as.integer(2))
double_deltas1 <- python_speech_features$delta(deltas1, as.integer(2))
deltas2 <- python_speech_features$delta(mfcc2, as.integer(2))
double_deltas2 <- python_speech_features$delta(deltas2, as.integer(2))
combined1 <- numpy$hstack((mfcc1, deltas1))
#combined2 <- numpy$hstack((mfcc2, deltas2, double_deltas2))
}
acoustic_distance <- function(file1, file2){
file1 <- scipy$io$wavfile$read(file1)
file2 <- scipy$io$wavfile$read(file2)
mfcc1 <- python_speech_features$mfcc(file1[[2]],
file1[[1]],
winlen = 0.025,
winstep = 0.01,
preemph = 0.97,
numcep = as.integer(12),
appendEnergy = TRUE,
winfunc = numpy$hamming,
nfft=as.integer(1024))
mfcc2 <- python_speech_features$mfcc(file2[[2]],
file2[[1]],
winlen = 0.025,
winstep = 0.01,
preemph = 0.97,
numcep = as.integer(12),
appendEnergy = TRUE,
winfunc = numpy$hamming,
nfft=as.integer(1024))
deltas1 <- python_speech_features$delta(mfcc1, as.integer(2))
double_deltas1 <- python_speech_features$delta(deltas1, as.integer(2))
deltas2 <- python_speech_features$delta(mfcc2, as.integer(2))
double_deltas2 <- python_speech_features$delta(deltas2, as.integer(2))
combined1 <- numpy$hstack(c(mfcc1, deltas1, double_deltas1))
combined2 <- numpy$hstack((mfcc2, deltas2, double_deltas2))
}
acoustic_distance <- function(file1, file2){
file1 <- scipy$io$wavfile$read(file1)
file2 <- scipy$io$wavfile$read(file2)
mfcc1 <- python_speech_features$mfcc(file1[[2]],
file1[[1]],
winlen = 0.025,
winstep = 0.01,
preemph = 0.97,
numcep = as.integer(12),
appendEnergy = TRUE,
winfunc = numpy$hamming,
nfft=as.integer(1024))
mfcc2 <- python_speech_features$mfcc(file2[[2]],
file2[[1]],
winlen = 0.025,
winstep = 0.01,
preemph = 0.97,
numcep = as.integer(12),
appendEnergy = TRUE,
winfunc = numpy$hamming,
nfft=as.integer(1024))
deltas1 <- python_speech_features$delta(mfcc1, as.integer(2))
double_deltas1 <- python_speech_features$delta(deltas1, as.integer(2))
deltas2 <- python_speech_features$delta(mfcc2, as.integer(2))
double_deltas2 <- python_speech_features$delta(deltas2, as.integer(2))
combined1 <- numpy$hstack(c(mfcc1, deltas1, double_deltas1))
combined2 <- numpy$hstack(c(mfcc2, deltas2, double_deltas2))
}
acoustic_distance("C:/Users/USER/Downloads/ipa_vowels/test_set/a.wav", "C:/Users/USER/Downloads/ipa_vowels/test_set/a.wav")
acoustic_distance <- function(file1, file2){
file1 <- scipy$io$wavfile$read(file1)
file2 <- scipy$io$wavfile$read(file2)
mfcc1 <- python_speech_features$mfcc(file1[[2]],
file1[[1]],
winlen = 0.025,
winstep = 0.01,
preemph = 0.97,
numcep = as.integer(12),
appendEnergy = TRUE,
winfunc = numpy$hamming,
nfft=as.integer(1024))
mfcc2 <- python_speech_features$mfcc(file2[[2]],
file2[[1]],
winlen = 0.025,
winstep = 0.01,
preemph = 0.97,
numcep = as.integer(12),
appendEnergy = TRUE,
winfunc = numpy$hamming,
nfft=as.integer(1024))
deltas1 <- python_speech_features$delta(mfcc1, as.integer(2))
double_deltas1 <- python_speech_features$delta(deltas1, as.integer(2))
deltas2 <- python_speech_features$delta(mfcc2, as.integer(2))
double_deltas2 <- python_speech_features$delta(deltas2, as.integer(2))
combined1 <- numpy$hstack(c(mfcc1, deltas1, double_deltas1))
combined2 <- numpy$hstack(c(mfcc2, deltas2, double_deltas2))
combined2
}
acoustic_distance("C:/Users/USER/Downloads/ipa_vowels/test_set/a.wav", "C:/Users/USER/Downloads/ipa_vowels/test_set/a.wav")
speechpy <- import("speechpy")
combined2 <- speechpy$processing$cmvn(combined2, variance_normalization = TRUE)
dtw <- import("dtw")
